# -*- coding: utf-8 -*-
"""Copy of PythonUrban_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qD2Nhx56S19f-ty5rkb7PxlVJIhcx4GN

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install geopandas 
!pip install mapclassify 
!pip install osmnx 
!pip install geopandas mapclassify

# TODO собрать импорты всех модулей в одном месте
import numpy as np
import pandas as pd
import json
import requests
import geopandas as gpd
import osmnx as ox

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "Приморский район, Санкт-Петербург" # название территории для которой будут строиться слои

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/tiny-sivak/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson" # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/tiny-sivak/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"  # ссылка на слой с улицами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

# TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME
district = ox.geocode_to_gdf(TERRITORY_NAME)
district.explore(tiles=TILES)

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf = gpd.read_file(STREETS_FILE_URL, mask=district)
gdf.explore(tiles=TILES)

"""### Обработка данных с улицами (Transform)"""

# TODO сгруппировать и объединить геометрии с одинаковыми названиями
gdf_group = gdf.dissolve(by="name") 
# Сгруппировали геометрии в новую переменную, так как далее по заданию нам надо переименовывать столбцы в gdf
# А после применения метода dissolve мы получаем таблицу с 1 столбцом geometry и индексами равными (name) в исходной таблице
gdf_group.info()

"""### Сохранение слоя с улицами (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
rename_columns = {
    "name": "Название" 
}
gdf.rename(columns=rename_columns, inplace=True)
# TODO для того чтобы переименовать индекс, нужно обратиться и нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)
gdf.index.rename("Индекс", inplace=True)
gdf

# группировка и объединение геометрий с одинаковыми названиями
gdf = gdf.dissolve(by="Название")
# TODO сохранить слой в географической проекции в формате GeoJSON
gdf.to_crs(4326).to_file('union_streets.geojson', driver='GeoJSON')

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# TODO отфильтровать объектоы культурного наследия по маске геометрии территории полученной ранее
gdf_o = gpd.read_file(KGIOP_FILE_URL, mask=district)
# gdf_o.explore(tiles=TILES)
# gdf_o.info()

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf_o["lon"] = round(gdf_o["geometry"].x, 3)
gdf_o["lat"] = round(gdf_o["geometry"].y, 3)
# gdf_o.info()

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
rename_columns = {
    "id": "Идентификатор",
    "ensemble_name": "Название ансамбля",
    "object_name": "Имя обьекта",
    "occurrence_time": "Время возникновения",
    "object_location": "Локация обьекта",
    "historical_category": "Историческая категория",
    "normative_act": "Нормативный акт",
    "object_type": "Тип обьекта",
    "lon": "Долгота",
    "lat": "Широта",
}
gdf_o.rename(columns=rename_columns, inplace=True)
# gdf

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf_o.to_crs(4326).to_file('union_kgiop.geojson', driver='GeoJSON')